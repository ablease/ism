// Code generated by counterfeiter. DO NOT EDIT.
package repositoriesfakes

import (
	sync "sync"

	v1alpha1 "github.com/pivotal-cf/ism/pkg/apis/osbapi/v1alpha1"
	repositories "github.com/pivotal-cf/ism/pkg/internal/repositories"
	types "k8s.io/apimachinery/pkg/types"
)

type FakeKubeBrokerRepo struct {
	GetStub        func(types.NamespacedName) (*v1alpha1.Broker, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 types.NamespacedName
	}
	getReturns struct {
		result1 *v1alpha1.Broker
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1alpha1.Broker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKubeBrokerRepo) Get(arg1 types.NamespacedName) (*v1alpha1.Broker, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKubeBrokerRepo) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeKubeBrokerRepo) GetCalls(stub func(types.NamespacedName) (*v1alpha1.Broker, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeKubeBrokerRepo) GetArgsForCall(i int) types.NamespacedName {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKubeBrokerRepo) GetReturns(result1 *v1alpha1.Broker, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1alpha1.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeBrokerRepo) GetReturnsOnCall(i int, result1 *v1alpha1.Broker, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Broker
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1alpha1.Broker
		result2 error
	}{result1, result2}
}

func (fake *FakeKubeBrokerRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKubeBrokerRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.KubeBrokerRepo = new(FakeKubeBrokerRepo)
