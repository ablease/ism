// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	sync "sync"

	commands "github.com/pivotal-cf/ism/commands"
	usecases "github.com/pivotal-cf/ism/usecases"
)

type FakeListServicesUsecase struct {
	GetServicesStub        func() ([]*usecases.Service, error)
	getServicesMutex       sync.RWMutex
	getServicesArgsForCall []struct {
	}
	getServicesReturns struct {
		result1 []*usecases.Service
		result2 error
	}
	getServicesReturnsOnCall map[int]struct {
		result1 []*usecases.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListServicesUsecase) GetServices() ([]*usecases.Service, error) {
	fake.getServicesMutex.Lock()
	ret, specificReturn := fake.getServicesReturnsOnCall[len(fake.getServicesArgsForCall)]
	fake.getServicesArgsForCall = append(fake.getServicesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetServices", []interface{}{})
	fake.getServicesMutex.Unlock()
	if fake.GetServicesStub != nil {
		return fake.GetServicesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeListServicesUsecase) GetServicesCallCount() int {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	return len(fake.getServicesArgsForCall)
}

func (fake *FakeListServicesUsecase) GetServicesCalls(stub func() ([]*usecases.Service, error)) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = stub
}

func (fake *FakeListServicesUsecase) GetServicesReturns(result1 []*usecases.Service, result2 error) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = nil
	fake.getServicesReturns = struct {
		result1 []*usecases.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeListServicesUsecase) GetServicesReturnsOnCall(i int, result1 []*usecases.Service, result2 error) {
	fake.getServicesMutex.Lock()
	defer fake.getServicesMutex.Unlock()
	fake.GetServicesStub = nil
	if fake.getServicesReturnsOnCall == nil {
		fake.getServicesReturnsOnCall = make(map[int]struct {
			result1 []*usecases.Service
			result2 error
		})
	}
	fake.getServicesReturnsOnCall[i] = struct {
		result1 []*usecases.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeListServicesUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListServicesUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ListServicesUsecase = new(FakeListServicesUsecase)
