// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	sync "sync"

	commands "github.com/pivotal-cf/ism/commands"
	osbapi "github.com/pivotal-cf/ism/osbapi"
)

type FakePlatformFetcher struct {
	GetPlatformsStub        func() ([]*osbapi.Platform, error)
	getPlatformsMutex       sync.RWMutex
	getPlatformsArgsForCall []struct {
	}
	getPlatformsReturns struct {
		result1 []*osbapi.Platform
		result2 error
	}
	getPlatformsReturnsOnCall map[int]struct {
		result1 []*osbapi.Platform
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePlatformFetcher) GetPlatforms() ([]*osbapi.Platform, error) {
	fake.getPlatformsMutex.Lock()
	ret, specificReturn := fake.getPlatformsReturnsOnCall[len(fake.getPlatformsArgsForCall)]
	fake.getPlatformsArgsForCall = append(fake.getPlatformsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPlatforms", []interface{}{})
	fake.getPlatformsMutex.Unlock()
	if fake.GetPlatformsStub != nil {
		return fake.GetPlatformsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPlatformsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePlatformFetcher) GetPlatformsCallCount() int {
	fake.getPlatformsMutex.RLock()
	defer fake.getPlatformsMutex.RUnlock()
	return len(fake.getPlatformsArgsForCall)
}

func (fake *FakePlatformFetcher) GetPlatformsCalls(stub func() ([]*osbapi.Platform, error)) {
	fake.getPlatformsMutex.Lock()
	defer fake.getPlatformsMutex.Unlock()
	fake.GetPlatformsStub = stub
}

func (fake *FakePlatformFetcher) GetPlatformsReturns(result1 []*osbapi.Platform, result2 error) {
	fake.getPlatformsMutex.Lock()
	defer fake.getPlatformsMutex.Unlock()
	fake.GetPlatformsStub = nil
	fake.getPlatformsReturns = struct {
		result1 []*osbapi.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformFetcher) GetPlatformsReturnsOnCall(i int, result1 []*osbapi.Platform, result2 error) {
	fake.getPlatformsMutex.Lock()
	defer fake.getPlatformsMutex.Unlock()
	fake.GetPlatformsStub = nil
	if fake.getPlatformsReturnsOnCall == nil {
		fake.getPlatformsReturnsOnCall = make(map[int]struct {
			result1 []*osbapi.Platform
			result2 error
		})
	}
	fake.getPlatformsReturnsOnCall[i] = struct {
		result1 []*osbapi.Platform
		result2 error
	}{result1, result2}
}

func (fake *FakePlatformFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPlatformsMutex.RLock()
	defer fake.getPlatformsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePlatformFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.PlatformFetcher = new(FakePlatformFetcher)
